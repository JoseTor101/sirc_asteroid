function Map.new 4
push constant 7
call Memory.alloc 1
pop pointer 0
push constant 2
call Array.new 1
pop local 3
push constant 0
push local 3
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push local 3
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
push constant 2
neg
push constant 0
call Vector3D.new 3
pop this 4
push constant 0
pop this 3
push constant 90
pop this 5
push constant 200
pop this 6
push argument 0
pop this 1
push argument 1
pop this 2
push this 2
call Array.new 1
pop this 0
push constant 0
pop local 0
label WHILE_EXP0
push local 0
push this 2
lt
not
if-goto WHILE_END0
push local 0
push this 0
add
push this 1
call Array.new 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 0
push this 0
add
pop pointer 1
push that 0
pop local 2
push constant 0
pop local 1
label WHILE_EXP1
push local 1
push this 1
lt
not
if-goto WHILE_END1
push local 1
push local 2
add
push constant 0
pop temp 0
pop pointer 1
push temp 0
pop that 0
push local 1
push constant 1
add
pop local 1
goto WHILE_EXP1
label WHILE_END1
push local 0
push constant 1
add
pop local 0
goto WHILE_EXP0
label WHILE_END0
push pointer 0
return
function Map.get_camera_direction 0
push argument 0
pop pointer 0
push this 3
return
function Map.add_camera_direction 0
push argument 0
pop pointer 0
push this 3
push argument 1
add
pop this 3
push this 3
push constant 360
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push this 3
push constant 360
sub
pop this 3
label IF_FALSE0
push this 3
push constant 360
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push this 3
push constant 360
add
pop this 3
label IF_FALSE1
push constant 0
return
function Map.get_camera_position 0
push argument 0
pop pointer 0
push this 4
return
function Map.add_camera_rotation 0
push argument 0
pop pointer 0
push argument 1
push argument 2
call camera_rotation.Add 2
pop temp 0
push constant 0
return
function Map.set_camera_position 0
push argument 0
pop pointer 0
push constant 0
push this 4
add
push argument 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 1
push this 4
add
push argument 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 2
push this 4
add
push argument 3
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Map.render_pixel 5
push argument 0
pop pointer 0
push argument 1
push constant 0
push this 4
add
pop pointer 1
push that 0
sub
pop local 0
push argument 2
push constant 1
push this 4
add
pop pointer 1
push that 0
sub
pop local 1
push argument 3
push constant 2
push this 4
add
pop pointer 1
push that 0
sub
pop local 2
push local 2
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 2
push this 6
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 1
push this 5
call Math.multiply 2
push local 2
call Math.divide 2
pop local 4
push local 0
push this 5
call Math.multiply 2
push local 2
call Math.divide 2
pop local 3
push local 3
push constant 256
add
push local 4
push constant 128
add
call Screen.drawPixel 2
pop temp 0
label IF_FALSE1
label IF_FALSE0
push constant 0
return
function Map.render_rectangle 10
push argument 0
pop pointer 0
push argument 1
push constant 0
push this 4
add
pop pointer 1
push that 0
sub
pop local 0
push argument 2
push constant 1
push this 4
add
pop pointer 1
push that 0
sub
pop local 1
push argument 3
push constant 2
push this 4
add
pop pointer 1
push that 0
sub
pop local 2
push argument 4
push constant 0
push this 4
add
pop pointer 1
push that 0
sub
pop local 3
push argument 5
push constant 1
push this 4
add
pop pointer 1
push that 0
sub
pop local 4
push argument 6
push constant 2
push this 4
add
pop pointer 1
push that 0
sub
pop local 5
push local 0
push this 5
call Math.multiply 2
push local 2
call Math.divide 2
pop local 6
push local 1
push this 5
call Math.multiply 2
push local 2
call Math.divide 2
pop local 7
push local 3
push this 5
call Math.multiply 2
push local 5
call Math.divide 2
pop local 8
push local 4
push this 5
call Math.multiply 2
push local 5
call Math.divide 2
pop local 9
push local 6
push constant 256
add
push local 7
push constant 128
add
push local 8
push constant 256
add
push local 9
push constant 128
add
call Screen.drawRectangle 4
pop temp 0
push constant 0
return
function Map.render_line 14
push argument 0
pop pointer 0
push argument 1
push constant 0
push this 4
add
pop pointer 1
push that 0
sub
pop local 0
push argument 2
push constant 1
push this 4
add
pop pointer 1
push that 0
sub
pop local 1
push argument 3
push constant 2
push this 4
add
pop pointer 1
push that 0
sub
pop local 2
push argument 4
push constant 0
push this 4
add
pop pointer 1
push that 0
sub
pop local 3
push argument 5
push constant 1
push this 4
add
pop pointer 1
push that 0
sub
pop local 4
push argument 6
push constant 2
push this 4
add
pop pointer 1
push that 0
sub
pop local 5
push local 2
push constant 0
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
pop local 2
label IF_FALSE0
push local 5
push constant 0
eq
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 1
pop local 5
label IF_FALSE1
push local 0
push this 5
call Math.multiply 2
push local 2
call Math.divide 2
pop local 6
push local 1
push this 5
call Math.multiply 2
push local 2
call Math.divide 2
pop local 7
push local 3
push this 5
call Math.multiply 2
push local 5
call Math.divide 2
pop local 8
push local 4
push this 5
call Math.multiply 2
push local 5
call Math.divide 2
pop local 9
push local 2
push constant 0
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push local 5
push constant 0
gt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push local 6
push constant 256
add
push local 7
push constant 128
add
push local 8
push constant 256
add
push local 9
push constant 128
add
call Screen.drawLine 4
pop temp 0
label IF_FALSE3
goto IF_END2
label IF_FALSE2
push local 5
push constant 0
gt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push local 0
push this 5
push local 2
neg
push constant 2
push this 4
add
pop pointer 1
push that 0
add
call Math.multiply 2
call Math.multiply 2
push local 2
call Math.divide 2
pop local 6
push local 1
push this 5
push local 2
neg
push constant 2
push this 4
add
pop pointer 1
push that 0
add
call Math.multiply 2
call Math.multiply 2
push local 2
call Math.divide 2
pop local 7
push local 6
neg
push constant 256
add
push local 7
neg
push constant 128
add
push local 8
push constant 256
add
push local 9
push constant 128
add
call Screen.drawLine 4
pop temp 0
label IF_FALSE4
label IF_END2
push constant 0
return
function Map.render_pyramid_top 1
push argument 0
pop pointer 0
push argument 4
push constant 2
call Math.divide 2
pop local 0
push pointer 0
push argument 1
push local 0
sub
push argument 2
push argument 3
push local 0
sub
push argument 1
push argument 2
push argument 5
sub
push argument 3
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
add
push argument 2
push argument 3
push local 0
sub
push argument 1
push argument 2
push argument 5
sub
push argument 3
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
add
push argument 2
push argument 3
push local 0
add
push argument 1
push argument 2
push argument 5
sub
push argument 3
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
sub
push argument 2
push argument 3
push local 0
add
push argument 1
push argument 2
push argument 5
sub
push argument 3
call Map.render_line 7
pop temp 0
push constant 0
return
function Map.render_pyramid_front 1
push argument 0
pop pointer 0
push argument 4
push constant 1
eq
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 1
pop local 0
goto IF_END0
label IF_FALSE0
push local 0
push constant 1
gt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push argument 4
push constant 2
call Math.divide 2
pop local 0
label IF_FALSE1
label IF_END0
push argument 6
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push constant 0
push this 4
add
pop pointer 1
push that 0
push argument 1
gt
push constant 0
push this 4
add
pop pointer 1
push that 0
or
push argument 1
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push constant 0
push this 4
add
pop pointer 1
push that 0
push argument 1
gt
if-goto IF_TRUE4
goto IF_FALSE4
label IF_TRUE4
push pointer 0
push argument 1
push local 0
add
push argument 2
push local 0
sub
push argument 3
push argument 1
push argument 2
push argument 3
push argument 5
add
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
add
push argument 2
push local 0
add
push argument 3
push argument 1
push argument 2
push argument 3
push argument 5
add
call Map.render_line 7
pop temp 0
label IF_FALSE4
push constant 0
push this 4
add
pop pointer 1
push that 0
push argument 1
lt
if-goto IF_TRUE5
goto IF_FALSE5
label IF_TRUE5
push pointer 0
push argument 1
push local 0
sub
push argument 2
push local 0
sub
push argument 3
push argument 1
push argument 2
push argument 3
push argument 5
add
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
sub
push argument 2
push local 0
add
push argument 3
push argument 1
push argument 2
push argument 3
push argument 5
add
call Map.render_line 7
pop temp 0
label IF_FALSE5
label IF_FALSE3
push pointer 0
push argument 1
push local 0
sub
push argument 2
push local 0
sub
push argument 3
push argument 1
push local 0
add
push argument 2
push local 0
sub
push argument 3
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
add
push argument 2
push local 0
sub
push argument 3
push argument 1
push local 0
add
push argument 2
push local 0
add
push argument 3
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
add
push argument 2
push local 0
add
push argument 3
push argument 1
push local 0
sub
push argument 2
push local 0
add
push argument 3
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
sub
push argument 2
push local 0
add
push argument 3
push argument 1
push local 0
sub
push argument 2
push local 0
sub
push argument 3
call Map.render_line 7
pop temp 0
goto IF_END2
label IF_FALSE2
push pointer 0
push argument 1
push local 0
sub
push argument 2
push local 0
sub
push argument 3
push argument 1
push argument 2
push argument 3
push argument 5
add
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
add
push argument 2
push local 0
sub
push argument 3
push argument 1
push argument 2
push argument 3
push argument 5
add
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
sub
push argument 2
push local 0
add
push argument 3
push argument 1
push argument 2
push argument 3
push argument 5
add
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
add
push argument 2
push local 0
add
push argument 3
push argument 1
push argument 2
push argument 3
push argument 5
add
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
sub
push argument 2
push local 0
sub
push argument 3
push argument 1
push local 0
add
push argument 2
push local 0
sub
push argument 3
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
add
push argument 2
push local 0
sub
push argument 3
push argument 1
push local 0
add
push argument 2
push local 0
add
push argument 3
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
add
push argument 2
push local 0
add
push argument 3
push argument 1
push local 0
sub
push argument 2
push local 0
add
push argument 3
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
sub
push argument 2
push local 0
add
push argument 3
push argument 1
push local 0
sub
push argument 2
push local 0
sub
push argument 3
call Map.render_line 7
pop temp 0
label IF_END2
push constant 0
return
function Map.render_player_front 1
push argument 0
pop pointer 0
push constant 1
pop local 0
push argument 4
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push constant 0
push this 4
add
pop pointer 1
push that 0
push argument 1
gt
push constant 0
push this 4
add
pop pointer 1
push that 0
or
push argument 1
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push constant 0
push this 4
add
pop pointer 1
push that 0
push argument 1
gt
if-goto IF_TRUE2
goto IF_FALSE2
label IF_TRUE2
push pointer 0
push argument 1
push local 0
add
push argument 2
push local 0
sub
push argument 3
push argument 1
push argument 2
push argument 3
push constant 2
add
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
add
push argument 2
push local 0
add
push argument 3
push argument 1
push argument 2
push argument 3
push constant 2
add
call Map.render_line 7
pop temp 0
label IF_FALSE2
push constant 0
push this 4
add
pop pointer 1
push that 0
push argument 1
lt
if-goto IF_TRUE3
goto IF_FALSE3
label IF_TRUE3
push pointer 0
push argument 1
push local 0
sub
push argument 2
push local 0
sub
push argument 3
push argument 1
push argument 2
push argument 3
push constant 2
add
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
sub
push argument 2
push local 0
add
push argument 3
push argument 1
push argument 2
push argument 3
push constant 2
add
call Map.render_line 7
pop temp 0
label IF_FALSE3
label IF_FALSE1
push pointer 0
push argument 1
push local 0
sub
push argument 2
push local 0
sub
push argument 3
push argument 1
push local 0
add
push argument 2
push local 0
sub
push argument 3
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
add
push argument 2
push local 0
sub
push argument 3
push argument 1
push local 0
add
push argument 2
push local 0
add
push argument 3
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
add
push argument 2
push local 0
add
push argument 3
push argument 1
push local 0
sub
push argument 2
push local 0
add
push argument 3
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
sub
push argument 2
push local 0
add
push argument 3
push argument 1
push local 0
sub
push argument 2
push local 0
sub
push argument 3
call Map.render_line 7
pop temp 0
goto IF_END0
label IF_FALSE0
push pointer 0
push argument 1
push local 0
sub
push argument 2
push local 0
sub
push argument 3
push argument 1
push argument 2
push argument 3
push constant 2
add
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
add
push argument 2
push local 0
sub
push argument 3
push argument 1
push argument 2
push argument 3
push constant 2
add
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
sub
push argument 2
push local 0
add
push argument 3
push argument 1
push argument 2
push argument 3
push constant 2
add
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
add
push argument 2
push local 0
add
push argument 3
push argument 1
push argument 2
push argument 3
push constant 2
add
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
sub
push argument 2
push local 0
sub
push argument 3
push argument 1
push local 0
add
push argument 2
push local 0
sub
push argument 3
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
add
push argument 2
push local 0
sub
push argument 3
push argument 1
push local 0
add
push argument 2
push local 0
add
push argument 3
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
add
push argument 2
push local 0
add
push argument 3
push argument 1
push local 0
sub
push argument 2
push local 0
add
push argument 3
call Map.render_line 7
pop temp 0
push pointer 0
push argument 1
push local 0
sub
push argument 2
push local 0
add
push argument 3
push argument 1
push local 0
sub
push argument 2
push local 0
sub
push argument 3
call Map.render_line 7
pop temp 0
label IF_END0
push constant 0
return
function Map.render_plane 0
push argument 0
pop pointer 0
push pointer 0
push constant 2
push constant 0
push constant 10
push constant 2
push constant 0
push constant 40
call Map.render_line 7
pop temp 0
push pointer 0
push constant 2
push constant 0
push constant 10
push constant 2
push constant 5
neg
push constant 10
call Map.render_line 7
pop temp 0
push pointer 0
push constant 2
push constant 0
push constant 40
push constant 2
push constant 5
neg
push constant 40
call Map.render_line 7
pop temp 0
push pointer 0
push constant 2
push constant 5
neg
push constant 10
push constant 2
push constant 5
neg
push constant 40
call Map.render_line 7
pop temp 0
push constant 0
return
function Map.render_circle 7
push argument 0
pop pointer 0
push argument 1
push constant 0
push this 4
add
pop pointer 1
push that 0
sub
pop local 4
push argument 2
push constant 1
push this 4
add
pop pointer 1
push that 0
sub
pop local 5
push argument 3
push constant 2
push this 4
add
pop pointer 1
push that 0
sub
pop local 6
push local 6
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 6
push this 6
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 5
push this 5
call Math.multiply 2
push local 6
call Math.divide 2
pop local 0
push local 4
push this 5
call Math.multiply 2
push local 6
call Math.divide 2
pop local 1
push argument 4
push this 5
call Math.multiply 2
push local 6
call Math.divide 2
pop local 2
push local 1
push constant 256
add
push local 0
push constant 128
add
push local 2
call Screen.drawCircle 3
pop temp 0
label IF_FALSE1
label IF_FALSE0
push constant 0
return
function Map.render_circle_no_fill 7
push argument 0
pop pointer 0
push argument 1
push constant 0
push this 4
add
pop pointer 1
push that 0
sub
pop local 4
push argument 2
push constant 1
push this 4
add
pop pointer 1
push that 0
sub
pop local 5
push argument 3
push constant 2
push this 4
add
pop pointer 1
push that 0
sub
pop local 6
push local 6
push constant 0
gt
if-goto IF_TRUE0
goto IF_FALSE0
label IF_TRUE0
push local 6
push this 6
lt
if-goto IF_TRUE1
goto IF_FALSE1
label IF_TRUE1
push local 5
push this 5
call Math.multiply 2
push local 6
call Math.divide 2
pop local 0
push local 4
push this 5
call Math.multiply 2
push local 6
call Math.divide 2
pop local 1
push argument 4
push this 5
call Math.multiply 2
push local 6
call Math.divide 2
pop local 2
push local 1
push constant 256
add
push local 0
push constant 128
add
push local 2
call Screen.drawCircleNoFill 3
pop temp 0
label IF_FALSE1
label IF_FALSE0
push constant 0
return
function Map.dispose 0
push argument 0
pop pointer 0
push pointer 0
call Memory.deAlloc 1
pop temp 0
push constant 0
return
